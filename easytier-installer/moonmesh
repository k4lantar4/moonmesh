#!/bin/bash

# 🎛️ مدیر EasyTier - منوی تعاملی
# نسخه: 1.0
# هدف: مدیریت ساده EasyTier با 6 گزینه اصلی

set -e

# رنگ‌ها
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# مسیرها
CONFIG_DIR="/etc/easytier"
LOG_FILE="/var/log/easytier.log"
SERVICE_NAME="easytier"

# =============================================================================
# توابع کمکی
# =============================================================================

print_header() {
    clear
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════════════════════╗"
    echo "║                          🎛️  EasyTier Manager                           ║"
    echo "║                         مدیریت ساده شبکه تانل                          ║"
    echo "╚══════════════════════════════════════════════════════════════════════════╝${NC}"
    echo
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

press_any_key() {
    echo -e "\n${YELLOW}برای ادامه هر کلیدی را فشار دهید...${NC}"
    read -n 1 -s
}

# =============================================================================
# گزینه 1: شروع سرویس
# =============================================================================

start_service() {
    echo -e "${GREEN}=== شروع سرویس EasyTier ===${NC}"
    echo
    
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        log_warning "سرویس EasyTier قبلاً در حال اجرا است"
        systemctl status "$SERVICE_NAME" --no-pager -l
    else
        log_info "شروع سرویس EasyTier..."
        if systemctl start "$SERVICE_NAME"; then
            log_success "سرویس با موفقیت شروع شد"
            sleep 2
            systemctl status "$SERVICE_NAME" --no-pager -l
        else
            log_error "خطا در شروع سرویس"
            log_info "لاگ خطا:"
            journalctl -u "$SERVICE_NAME" --no-pager -l | tail -10
        fi
    fi
    
    press_any_key
}

# =============================================================================
# گزینه 2: توقف سرویس
# =============================================================================

stop_service() {
    echo -e "${RED}=== توقف سرویس EasyTier ===${NC}"
    echo
    
    if ! systemctl is-active --quiet "$SERVICE_NAME"; then
        log_warning "سرویس EasyTier در حال اجرا نیست"
    else
        log_info "توقف سرویس EasyTier..."
        if systemctl stop "$SERVICE_NAME"; then
            log_success "سرویس با موفقیت متوقف شد"
        else
            log_error "خطا در توقف سرویس"
        fi
    fi
    
    # نمایش وضعیت نهایی
    systemctl status "$SERVICE_NAME" --no-pager -l || true
    
    press_any_key
}

# =============================================================================
# گزینه 3: نمایش وضعیت
# =============================================================================

show_status() {
    echo -e "${BLUE}=== وضعیت EasyTier ===${NC}"
    echo
    
    # وضعیت سرویس
    echo -e "${CYAN}📊 وضعیت سرویس:${NC}"
    systemctl status "$SERVICE_NAME" --no-pager -l || true
    echo
    
    # بررسی اتصال
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        echo -e "${CYAN}🔗 اطلاعات اتصال:${NC}"
        
        # نمایش peers (اگر easytier-cli موجود باشد)
        if command -v easytier-cli &> /dev/null; then
            echo "Peers متصل:"
            easytier-cli peer 2>/dev/null || echo "  عدم دسترسی به اطلاعات peer"
            echo
            
            echo "Routes فعال:"
            easytier-cli route 2>/dev/null || echo "  عدم دسترسی به اطلاعات route"
        else
            log_warning "easytier-cli یافت نشد"
        fi
        
        echo
        echo -e "${CYAN}📡 آمار شبکه (آخرین 5 خط لاگ):${NC}"
        journalctl -u "$SERVICE_NAME" --no-pager -l | tail -5
    else
        log_warning "سرویس در حال اجرا نیست"
    fi
    
    press_any_key
}

# =============================================================================
# گزینه 4: مدیریت Peers
# =============================================================================

manage_peers() {
    echo -e "${PURPLE}=== مدیریت Peers ===${NC}"
    echo
    
    if ! command -v easytier-cli &> /dev/null; then
        log_error "easytier-cli یافت نشد"
        press_any_key
        return
    fi
    
    if ! systemctl is-active --quiet "$SERVICE_NAME"; then
        log_warning "سرویس EasyTier در حال اجرا نیست"
        echo "ابتدا سرویس را شروع کنید"
        press_any_key
        return
    fi
    
    while true; do
        echo -e "${PURPLE}=== منوی مدیریت Peers ===${NC}"
        echo "1) نمایش peers متصل"
        echo "2) اضافه کردن peer جدید"
        echo "3) ping تست"
        echo "4) بازگشت به منوی اصلی"
        echo
        read -p "انتخاب کنید [1-4]: " peer_choice
        
        case $peer_choice in
            1)
                echo -e "\n${CYAN}Peers متصل:${NC}"
                easytier-cli peer 2>/dev/null || log_error "خطا در دریافت اطلاعات peers"
                echo
                ;;
            2)
                echo
                read -p "IP:Port peer جدید (مثال: 1.2.3.4:11011): " new_peer
                if [[ -n "$new_peer" ]]; then
                    log_info "اضافه کردن peer: $new_peer"
                    log_warning "💡 برای اضافه کردن دائمی، فایل config را ویرایش کنید:"
                    echo "   sudo nano $CONFIG_DIR/config.yml"
                else
                    log_error "IP:Port معتبر وارد نکردید"
                fi
                echo
                ;;
            3)
                echo
                read -p "IP مقصد برای ping (مثال: 10.145.0.1): " ping_ip
                if [[ -n "$ping_ip" ]]; then
                    log_info "تست ping به $ping_ip..."
                    ping -c 3 "$ping_ip" || log_error "ping ناموفق"
                else
                    log_error "IP معتبر وارد نکردید"
                fi
                echo
                ;;
            4)
                return
                ;;
            *)
                log_error "گزینه نامعتبر"
                ;;
        esac
        
        press_any_key
        echo
    done
}

# =============================================================================
# گزینه 5: مدیریت شبکه (بهبود یافته - تسک 7)
# =============================================================================

manage_network() {
    echo -e "${YELLOW}=== مدیریت شبکه ===${NC}"
    echo
    
    while true; do
        echo -e "${YELLOW}=== منوی مدیریت شبکه ===${NC}"
        echo "1) نمایش پیکربندی فعلی"
        echo "2) ایجاد network جدید (name + secret + IP)"
        echo "3) اتصال به network موجود"
        echo "4) نمایش route های فعال"
        echo "5) تست ping و connectivity"
        echo "6) ویرایش دستی تنظیمات شبکه"
        echo "7) restart سرویس (اعمال تغییرات)"
        echo "8) بازگشت به منوی اصلی"
        echo
        read -p "انتخاب کنید [1-8]: " network_choice
        
        case $network_choice in
            1)
                echo -e "\n${CYAN}پیکربندی فعلی:${NC}"
                if [[ -f "$CONFIG_DIR/config.yml" ]]; then
                    cat "$CONFIG_DIR/config.yml"
                else
                    log_error "فایل config یافت نشد"
                fi
                echo
                ;;
            2)
                echo -e "\n${GREEN}=== ایجاد Network جدید ===${NC}"
                create_new_network
                ;;
            3)
                echo -e "\n${BLUE}=== اتصال به Network موجود ===${NC}"
                join_existing_network
                ;;
            4)
                echo -e "\n${CYAN}=== نمایش Routes فعال ===${NC}"
                show_active_routes
                ;;
            5)
                echo -e "\n${PURPLE}=== تست Ping و Connectivity ===${NC}"
                advanced_ping_test
                ;;
            6)
                echo
                log_info "ویرایش فایل پیکربندی..."
                if command -v nano &> /dev/null; then
                    nano "$CONFIG_DIR/config.yml"
                elif command -v vi &> /dev/null; then
                    vi "$CONFIG_DIR/config.yml"
                else
                    log_error "ویرایشگر متنی یافت نشد"
                fi
                ;;
            7)
                echo
                log_info "راه‌اندازی مجدد سرویس..."
                systemctl restart "$SERVICE_NAME" && log_success "سرویس راه‌اندازی شد" || log_error "خطا در راه‌اندازی"
                ;;
            8)
                return
                ;;
            *)
                log_error "گزینه نامعتبر"
                ;;
        esac
        
        press_any_key
        echo
    done
}

# =============================================================================
# توابع جدید تسک 7
# =============================================================================

# ایجاد network جدید
create_new_network() {
    echo -e "${GREEN}ایجاد network جدید${NC}"
    echo
    
    # دریافت اطلاعات از کاربر
    read -p "نام شبکه (مثال: my-office-network): " network_name
    if [[ -z "$network_name" ]]; then
        log_error "نام شبکه نمی‌تواند خالی باشد"
        return 1
    fi
    
    read -p "کلید امنیتی شبکه (خالی=تولید خودکار): " network_secret
    if [[ -z "$network_secret" ]]; then
        network_secret=$(openssl rand -hex 16 2>/dev/null || echo "secret-$(date +%s)")
        log_info "کلید تولید شد: $network_secret"
    fi
    
    # پیشنهاد IP آزاد
    suggested_ip="10.145.0.$((RANDOM % 253 + 2))"
    read -p "IP شما در تانل (پیشفرض: $suggested_ip): " tunnel_ip
    tunnel_ip=${tunnel_ip:-$suggested_ip}
    
    # اعتبارسنجی IP
    if [[ ! "$tunnel_ip" =~ ^10\.145\.0\.[0-9]+$ ]]; then
        log_warning "IP باید در محدوده 10.145.0.x باشد"
    fi
    
    # ایجاد فایل config
    log_info "ایجاد فایل پیکربندی..."
    
    sudo tee "$CONFIG_DIR/config.yml" > /dev/null << EOF
# 🔧 EasyTier - Network جدید: $network_name
# تولید شده در: $(date)

# مشخصات شبکه
network_name: "$network_name"
network_secret: "$network_secret"

# IP تانل (منحصر به فرد)
ipv4: "$tunnel_ip"
ipv4_prefix: 24

# پورت شنود
listen_port: 11011

# لیست peers (سایر اعضای شبکه)
peers:
  # برای اتصال به node های دیگر، IP آنها را اینجا اضافه کنید
  # - "IP:11011"

# hostname
hostname: "$(hostname)"

# نکات:
# - این node اولین عضو شبکه است
# - برای اضافه کردن node جدید: IP این سرور + کلید مشترک
# - پورت 11011 روی فایروال باز باشد
EOF
    
    # تنظیم مجوزها
    sudo chmod 600 "$CONFIG_DIR/config.yml"
    sudo chown root:root "$CONFIG_DIR/config.yml"
    
    log_success "Network جدید ایجاد شد!"
    echo
    echo -e "${CYAN}🔑 اطلاعات شبکه:${NC}"
    echo "  📛 نام: $network_name"
    echo "  🔐 کلید: $network_secret"
    echo "  🌐 IP شما: $tunnel_ip"
    echo "  🔌 پورت: 11011"
    echo
    echo -e "${YELLOW}💡 برای اضافه کردن node جدید:${NC}"
    echo "  1. IP این سرور را پیدا کنید: $(curl -s ipinfo.io/ip 2>/dev/null || hostname -I | awk '{print $1}')"
    echo "  2. در node جدید گزینه 'اتصال به network موجود' را انتخاب کنید"
    echo "  3. اطلاعات بالا را وارد کنید"
}

# اتصال به network موجود
join_existing_network() {
    echo -e "${BLUE}اتصال به network موجود${NC}"
    echo
    
    # دریافت اطلاعات شبکه موجود
    read -p "نام شبکه: " network_name
    if [[ -z "$network_name" ]]; then
        log_error "نام شبکه نمی‌تواند خالی باشد"
        return 1
    fi
    
    read -p "کلید امنیتی شبکه: " network_secret
    if [[ -z "$network_secret" ]]; then
        log_error "کلید امنیتی نمی‌تواند خالی باشد"
        return 1
    fi
    
    # پیشنهاد IP آزاد
    suggested_ip="10.145.0.$((RANDOM % 253 + 2))"
    read -p "IP شما در تانل (پیشفرض: $suggested_ip): " tunnel_ip
    tunnel_ip=${tunnel_ip:-$suggested_ip}
    
    # IP peer اصلی
    read -p "IP سرور اصلی شبکه (مثال: 1.2.3.4): " peer_ip
    if [[ -z "$peer_ip" ]]; then
        log_error "IP سرور اصلی ضروری است"
        return 1
    fi
    
    # ایجاد فایل config
    log_info "ایجاد فایل پیکربندی..."
    
    sudo tee "$CONFIG_DIR/config.yml" > /dev/null << EOF
# 🔧 EasyTier - اتصال به: $network_name
# تولید شده در: $(date)

# مشخصات شبکه
network_name: "$network_name"
network_secret: "$network_secret"

# IP تانل (منحصر به فرد)
ipv4: "$tunnel_ip"
ipv4_prefix: 24

# پورت شنود
listen_port: 11011

# اتصال به peer اصلی
peers:
  - "$peer_ip:11011"

# hostname
hostname: "$(hostname)"
EOF
    
    # تنظیم مجوزها
    sudo chmod 600 "$CONFIG_DIR/config.yml"
    sudo chown root:root "$CONFIG_DIR/config.yml"
    
    log_success "تنظیمات اتصال کامل شد!"
    echo
    echo -e "${CYAN}🔗 اطلاعات اتصال:${NC}"
    echo "  📛 شبکه: $network_name"
    echo "  🌐 IP شما: $tunnel_ip"
    echo "  🎯 Peer اصلی: $peer_ip:11011"
    echo
    echo -e "${YELLOW}💡 مرحله بعد:${NC}"
    echo "  - سرویس را restart کنید (گزینه 7)"
    echo "  - چند ثانیه صبر کنید"
    echo "  - وضعیت اتصال را بررسی کنید (گزینه 4)"
}

# نمایش route های فعال
show_active_routes() {
    echo -e "${CYAN}Routes فعال در سیستم${NC}"
    echo
    
    if ! command -v easytier-cli &> /dev/null; then
        log_error "easytier-cli یافت نشد"
        return 1
    fi
    
    if ! systemctl is-active --quiet "$SERVICE_NAME"; then
        log_warning "سرویس EasyTier فعال نیست"
        echo "ابتدا سرویس را شروع کنید"
        return 1
    fi
    
    echo -e "${BLUE}🛣️  EasyTier Routes:${NC}"
    easytier-cli route 2>/dev/null || log_error "خطا در دریافت routes"
    
    echo
    echo -e "${BLUE}🌐 System Routes (10.145.0.0/24):${NC}"
    ip route show | grep "10.145.0" || echo "  هیچ route ای یافت نشد"
    
    echo
    echo -e "${BLUE}🔗 Connected Peers:${NC}"
    easytier-cli peer 2>/dev/null || log_error "خطا در دریافت peers"
    
    echo
    echo -e "${BLUE}📊 Network Interfaces:${NC}"
    ip addr show | grep -A 2 "easytier\|tun" || echo "  هیچ interface تانل یافت نشد"
}

# تست ping پیشرفته
advanced_ping_test() {
    echo -e "${PURPLE}تست اتصال شامل${NC}"
    echo
    
    if ! systemctl is-active --quiet "$SERVICE_NAME"; then
        log_warning "سرویس EasyTier فعال نیست"
        echo "ابتدا سرویس را شروع کنید"
        return 1
    fi
    
    # دریافت IP تانل از config
    local my_tunnel_ip=""
    if [[ -f "$CONFIG_DIR/config.yml" ]]; then
        my_tunnel_ip=$(grep "ipv4:" "$CONFIG_DIR/config.yml" | cut -d'"' -f2 | head -1)
    fi
    
    echo -e "${CYAN}1. تست خودی (loopback):${NC}"
    if [[ -n "$my_tunnel_ip" ]]; then
        ping -c 3 "$my_tunnel_ip" && log_success "Ping خودی OK" || log_error "Ping خودی ناموفق"
    else
        log_warning "IP تانل در config یافت نشد"
    fi
    
    echo
    echo -e "${CYAN}2. تست gateway تانل:${NC}"
    ping -c 3 "10.145.0.1" && log_success "Gateway OK" || log_warning "Gateway پاسخ نداد"
    
    echo
    echo -e "${CYAN}3. تست DNS عمومی:${NC}"
    ping -c 2 "8.8.8.8" && log_success "اتصال اینترنت OK" || log_error "مشکل اتصال اینترنت"
    
    echo
    echo -e "${CYAN}4. تست به peer دیگر:${NC}"
    read -p "IP peer مقصد برای تست (خالی=رد): " target_peer
    if [[ -n "$target_peer" ]]; then
        ping -c 3 "$target_peer" && log_success "Peer connectivity OK" || log_error "ارتباط با peer برقرار نشد"
    fi
    
    echo
    echo -e "${CYAN}5. خلاصه وضعیت:${NC}"
    if command -v easytier-cli &> /dev/null; then
        local peer_count=$(easytier-cli peer 2>/dev/null | grep -c "peer_id" || echo "0")
        echo "  🔗 تعداد peer متصل: $peer_count"
        
        local route_count=$(easytier-cli route 2>/dev/null | grep -c "10.145.0" || echo "0")
        echo "  🛣️  تعداد route: $route_count"
    fi
    
    echo "  🌐 IP تانل شما: ${my_tunnel_ip:-نامشخص}"
    echo "  📡 وضعیت سرویس: $(systemctl is-active "$SERVICE_NAME")"
}

# =============================================================================
# منوی اصلی
# =============================================================================

show_main_menu() {
    while true; do
        print_header
        
        # نمایش وضعیت کلی
        local service_status
        if systemctl is-active --quiet "$SERVICE_NAME"; then
            service_status="${GREEN}🟢 فعال${NC}"
        else
            service_status="${RED}🔴 غیرفعال${NC}"
        fi
        
        echo -e "${CYAN}📊 وضعیت سرویس:${NC} $service_status"
        echo -e "${CYAN}📁 مسیر Config:${NC} $CONFIG_DIR/config.yml"
        echo -e "${CYAN}📄 لاگ فایل:${NC} $LOG_FILE"
        echo
        echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo
        echo "1) 🚀 شروع سرویس"
        echo "2) 🛑 توقف سرویس"  
        echo "3) 📊 نمایش وضعیت"
        echo "4) 🔗 مدیریت Peers"
        echo "5) 🌐 مدیریت شبکه"
        echo "6) ⚡ بهینه‌سازی Performance"
        echo "7) 🔧 عیب‌یابی و تعمیر"
        echo "8) 🚪 خروج"
        echo
        read -p "گزینه خود را انتخاب کنید [1-8]: " choice
        
        echo
        case $choice in
            1) start_service ;;
            2) stop_service ;;
            3) show_status ;;
            4) manage_peers ;;
            5) manage_network ;;
            6) performance_menu ;;
            7) troubleshooting_menu ;;
            8) 
                echo -e "${GREEN}خداحافظ! 👋${NC}"
                exit 0
                ;;
            *)
                log_error "گزینه نامعتبر. لطفاً عددی بین 1 تا 8 وارد کنید."
                press_any_key
                ;;
        esac
    done
}

# =============================================================================
# گزینه 6: منوی بهینه‌سازی Performance (تسک 8)
# =============================================================================

performance_menu() {
    echo -e "${CYAN}⚡ بهینه‌سازی Performance${NC}"
    echo
    
    while true; do
        echo -e "${CYAN}=== منوی Performance ===${NC}"
        echo "1) بهینه‌سازی کامل (MTU + Buffer + SysCtl)"
        echo "2) تنظیم MTU بهینه"
        echo "3) بهینه‌سازی Buffer Sizes"
        echo "4) تنظیم SysCtl های ضروری"
        echo "5) تست Performance"
        echo "6) نمایش وضعیت فعلی"
        echo "7) ذخیره تنظیمات دائمی"
        echo "8) پاک کردن تنظیمات"
        echo "9) بازگشت به منوی اصلی"
        echo
        read -p "انتخاب کنید [1-9]: " perf_choice
        
        case $perf_choice in
            1)
                echo -e "\n${GREEN}=== بهینه‌سازی کامل ===${NC}"
                if [[ -f "utils/performance-optimizer.sh" ]]; then
                    chmod +x utils/performance-optimizer.sh
                    utils/performance-optimizer.sh optimize
                else
                    log_error "performance-optimizer.sh یافت نشد"
                fi
                ;;
            2)
                echo -e "\n${BLUE}=== تنظیم MTU ===${NC}"
                if [[ -f "utils/performance-optimizer.sh" ]]; then
                    utils/performance-optimizer.sh mtu
                else
                    log_error "performance-optimizer.sh یافت نشد"
                fi
                ;;
            3)
                echo -e "\n${BLUE}=== بهینه‌سازی Buffers ===${NC}"
                if [[ -f "utils/performance-optimizer.sh" ]]; then
                    utils/performance-optimizer.sh buffers
                else
                    log_error "performance-optimizer.sh یافت نشد"
                fi
                ;;
            4)
                echo -e "\n${BLUE}=== تنظیم SysCtl ===${NC}"
                if [[ -f "utils/performance-optimizer.sh" ]]; then
                    utils/performance-optimizer.sh sysctl
                else
                    log_error "performance-optimizer.sh یافت نشد"
                fi
                ;;
            5)
                echo -e "\n${PURPLE}=== تست Performance ===${NC}"
                if [[ -f "utils/performance-optimizer.sh" ]]; then
                    utils/performance-optimizer.sh test
                else
                    log_error "performance-optimizer.sh یافت نشد"
                fi
                ;;
            6)
                echo -e "\n${CYAN}=== وضعیت Performance ===${NC}"
                if [[ -f "utils/performance-optimizer.sh" ]]; then
                    utils/performance-optimizer.sh status
                else
                    log_error "performance-optimizer.sh یافت نشد"
                fi
                ;;
            7)
                echo -e "\n${GREEN}=== ذخیره دائمی ===${NC}"
                if [[ -f "utils/performance-optimizer.sh" ]]; then
                    utils/performance-optimizer.sh save
                else
                    log_error "performance-optimizer.sh یافت نشد"
                fi
                ;;
            8)
                echo -e "\n${RED}=== پاک کردن تنظیمات ===${NC}"
                read -p "آیا مطمئن هستید؟ [y/N]: " confirm
                if [[ "$confirm" =~ ^[Yy]$ ]]; then
                    if [[ -f "utils/performance-optimizer.sh" ]]; then
                        utils/performance-optimizer.sh cleanup
                    else
                        log_error "performance-optimizer.sh یافت نشد"
                    fi
                else
                    log_info "عملیات لغو شد"
                fi
                ;;
            9)
                return
                ;;
            *)
                log_error "گزینه نامعتبر"
                ;;
        esac
        
        press_any_key
        echo
    done
}

# =============================================================================
# گزینه 7: منوی عیب‌یابی و تعمیر (تسک 10)
# =============================================================================

troubleshooting_menu() {
    echo -e "${RED}🔧 عیب‌یابی و تعمیر${NC}"
    echo
    
    while true; do
        echo -e "${RED}=== منوی Troubleshooting ===${NC}"
        echo "1) تشخیص کامل مشکلات"
        echo "2) تست اتصال خودکار (ping peers)"
        echo "3) بررسی وضعیت سرویس"
        echo "4) نمایش لاگ‌های اخیر"
        echo "5) تعمیر خودکار مشکلات"
        echo "6) وضعیت سریع"
        echo "7) restart سرویس (در صورت خرابی)"
        echo "8) مشاهده لاگ زنده"
        echo "9) بازگشت به منوی اصلی"
        echo
        read -p "انتخاب کنید [1-9]: " trouble_choice
        
        case $trouble_choice in
            1)
                echo -e "\n${PURPLE}=== تشخیص کامل ===${NC}"
                if [[ -f "utils/troubleshooter.sh" ]]; then
                    chmod +x utils/troubleshooter.sh
                    utils/troubleshooter.sh diagnose
                else
                    log_error "troubleshooter.sh یافت نشد"
                fi
                ;;
            2)
                echo -e "\n${BLUE}=== تست اتصال ===${NC}"
                if [[ -f "utils/troubleshooter.sh" ]]; then
                    utils/troubleshooter.sh connectivity
                else
                    log_error "troubleshooter.sh یافت نشد"
                fi
                ;;
            3)
                echo -e "\n${CYAN}=== بررسی سرویس ===${NC}"
                if [[ -f "utils/troubleshooter.sh" ]]; then
                    utils/troubleshooter.sh service
                else
                    log_error "troubleshooter.sh یافت نشد"
                fi
                ;;
            4)
                echo -e "\n${YELLOW}=== لاگ‌های اخیر ===${NC}"
                read -p "تعداد خطوط (پیشفرض: 20): " log_lines
                log_lines=${log_lines:-20}
                if [[ -f "utils/troubleshooter.sh" ]]; then
                    utils/troubleshooter.sh logs "$log_lines"
                else
                    log_error "troubleshooter.sh یافت نشد"
                fi
                ;;
            5)
                echo -e "\n${GREEN}=== تعمیر خودکار ===${NC}"
                if [[ -f "utils/troubleshooter.sh" ]]; then
                    utils/troubleshooter.sh fix
                else
                    log_error "troubleshooter.sh یافت نشد"
                fi
                ;;
            6)
                echo -e "\n${CYAN}=== وضعیت سریع ===${NC}"
                if [[ -f "utils/troubleshooter.sh" ]]; then
                    utils/troubleshooter.sh status
                else
                    log_error "troubleshooter.sh یافت نشد"
                fi
                ;;
            7)
                echo -e "\n${RED}=== Restart سرویس ===${NC}"
                if [[ -f "utils/troubleshooter.sh" ]]; then
                    utils/troubleshooter.sh restart
                else
                    log_info "راه‌اندازی مجدد سرویس..."
                    systemctl restart "$SERVICE_NAME" && log_success "سرویس راه‌اندازی شد" || log_error "خطا در راه‌اندازی"
                fi
                ;;
            8)
                echo -e "\n${BLUE}=== لاگ زنده ===${NC}"
                log_info "نمایش لاگ زنده (Ctrl+C برای خروج)..."
                journalctl -u "$SERVICE_NAME" -f
                ;;
            9)
                return
                ;;
            *)
                log_error "گزینه نامعتبر"
                ;;
        esac
        
        press_any_key
        echo
    done
}

# =============================================================================
# اجرای برنامه
# =============================================================================

# بررسی دسترسی root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}[ERROR]${NC} این اسکریپت باید با دسترسی root اجرا شود"
    echo "استفاده: sudo $0"
    exit 1
fi

# شروع منوی اصلی
show_main_menu 